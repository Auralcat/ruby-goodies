# The idea here is to generate a CSS file from a HTML file.
# We'll use Nokogiri to do the parsing

require 'nokogiri'

def open_html_source
  # Gets either standard input or a file. Returns the content.
  output = Nokogiri::HTML(ARGF.read)
  puts 'Errors found' if output.errors.any?
  output
end

# Open local file using Nokogiri
# SAMPLE FILE
html_file = open_html_source

# Put all found classes in here
html_classes = []
html_file.css('*').each do |element|
  class_string = element.attr('class')
  html_classes.concat(class_string.split(' ')) unless class_string.nil?
end
# ^ The same can be done for extracting ids.

# puts html_classes
# I just need one occurrence of each item, and no empty strings!
html_classes.uniq!.reject! { |x| x == '' }
puts "#{html_classes.length} classes have been scraped."

# Now that I have the classes, I want the output to be like this:
# .class-name {
#
# }
#
# .another-class {
#
# }

output = "/* This file has been generated by css_primer.rb */\n\n"
html_classes.each do |item|
  output += ".#{item} {\n\n}\n\n"
end

# Write this to a file
File.open('test_output.css', 'w') { |file| file.write(output) }
